/*ПОПРОБУЙТЕ
Используя приведенный выше пример, напишите программу для
перевода гривен, рублей и юаней в доллары. Если вы любите реализм,
уточните обменные курсы в Интернете .*/
/*
#include <std_lib_facilities.h>
int main()
{
    constexpr double UAH = 27.34;
    constexpr double RUB = 72.26;
    constexpr double CNY = 6.46;
    double length = 0;
    string currency = " ";
    cout << "What amount and currency you want to convert to dollars? (UAH, RUB, CNY)\n";
    cin >> length >> currency;
    if (currency == "UAH" || currency == "uah") {
        cout << length << " UAH is " << length / UAH << " USD.\n";
    }
    else if (currency == "RUB" || currency == "rub") {
        cout << length << " RUB is " << length / RUB << " USD.\n";
    }
    else if (currency == "CNY" || currency == "cny") {
        cout << length << " CNY is " << length / CNY << " USD.\n";
    }
    else {
        cout << "I don't know what is " << currency << " , sorry.\n";
    }
}
*/


/*ПОПРОБУЙТЕ
Пе репишите программу преобразования валют из п редыдущего раздела,
используя и нструкцию switch. Добавьте конвертацию евро и фунта стерлингов.
Какую из версий программы легче писать, понимать и модифицировать? Почему?*/
/*
#include <std_lib_facilities.h>
int main()
{
    double amount;
    constexpr double exch_uah = 27.34;
    constexpr double exch_rub = 72.13;
    constexpr double exch_eur = 0.84;
    constexpr double exch_gbp = 0.72;
    constexpr double exch_cny = 6.46;
    char currency;
    cout << "Enter amount and currency you want to convert to USD.\nAvailable currencies:\nu - for UAH\nr - for RUB\ne - for EUR\ng - for GBP\nc - for CNY\n\nAmount: ";
    cin >> amount;
    cout << "Currency: ";
    cin >> currency;
    switch (currency) {
    case 'u':
        cout << amount << " UAH is " << amount / exch_uah << " USD.\n";
        break;
    case 'r':
        cout << amount << " RUB is " << amount / exch_rub << " USD.\n";
        break;
    case 'e':
        cout << amount << " EUR is " << amount / exch_eur << " USD.\n";
        break;
    case 'g':
        cout << amount << " GBP is " << amount / exch_gbp << " USD.\n";
        break;
    case 'c':
        cout << amount << " CNY is " << amount / exch_cny << " USD.\n";
        break;

    default:
        cout << "Unkown curency.\n";
        break;
    }
}
*/


/*ПОПРОБУЙТЕ
Символ 'b' равен char ('a'+l) , 'c' равен char ('a'+2) и т.д. Используя
цикл, выведите на экран таблицу символов и соответствующих
им целочисленных значений.*/
/*
#include <std_lib_facilities.h>
int main()
{
    char a = 'a';
    int i = a;
    while (i <= 'z') {
        cout << i << "\t" << a << "\n";
        i++;
        a = i;
    }
}
*/


/*ПОПРОБУЙТЕ
Перепишите программу из предыдущей врезки "Попробуйте", выводящую
символы и соответствующие им целочисленные значения.
с помощью инструкции for. Затем модифицируйте программу так.
чтобы таблица содержала значения для прописных символов и цифр.*/
/*
#include <std_lib_facilities.h>
int main()
{
    char a = 'a';
    char A = 'A';
    char num = '0';
    for (int i = a; i <= 'z'; i++) {
        a = i;
        cout << i << "\t" << a << "\n";
    }
    for (int i = A; i <= 'Z'; i++) {
        A = i;
        cout << i << "\t" << A << "\n";
    }
    for (int i = num; i <= '9'; i++) {
        num = i;
        cout << i << "\t" << num << "\n";
    }
}
*/


/*ПОПРОБУЙТЕ
Реализуйте функцию square(), не используя оператор умножения;
иначе говоря, выполните умножение х*х с помощью повторяющегося
сложения (начните с переменной, равной нулю, и х раз добавьте к ней
число х). Затем выполните версию "первопрограммы", используя функцию
square().*/
/*
#include <std_lib_facilities.h>
int squaredsd(int x)
{
    int y = 0;
    for (int i = 0; i < x; i++) {
        y += x;
    }
    return y;
}
int main()
{
    cout << squaredsd(4) << '\n';
    cout << squaredsd(10) << '\n';
}
*/


/*Задание Выполните задание шаг за шагом. Не следует торопиться и пропускать
этапы . На каждом этапе проверьте программу, введя по крайней мере три
пары значений - чем больше, тем лучше.*/
/*1 . Напишите программу. содержащую цикл while, в котором считываются
и выводятся на экран два числа типа int. Для выхода из программы
используйте символ '|'.*/
/*
#include <std_lib_facilities.h>
int main()
{
    int x;
    vector<int> nums;
    while (cin >> x)
        nums.push_back(x);
    for (int i = 0; i < 2; ++i)
            cout << nums[i] << "\n";
}
*/


/*2. Измените программу так. чтобы она выводила на экран строку "Наименьшее
значение равно : " с последующим наименьшим значением,
а затем - строку " Наибольшее значение равно : " с последующим наибольшим
значением.*/
/*
#include <std_lib_facilities.h>
int main()
{
    int x;
    vector<int> nums;
    while (cin >> x)
        nums.push_back(x);
    sort(nums);
    for (int i = 0; i < nums.size(); ++i)
    {
        if (i == 0)
        {
            cout << "Lowest value is: " << nums[i] << "\n";
        }
        else if (i == nums.size() - 1)
        {
            cout << "Highest value is: " << nums[i] << "\n";
        }
    }
}
*/


/*3. Исправьте программу так. чтобы она выводила строку "Числа равны" ,
но только при равенстве введенных чисел.*/
/*
#include <std_lib_facilities.h>
int main()
{
    int lval;
    int hval;
    int x;
    vector<int> nums;
    while (cin >> x)
        nums.push_back(x);
    sort(nums);
    for (int i = 0; i < nums.size(); ++i)
    {
        if (i == 0)
        {
            lval = nums[i];
            cout << "Lowest value is: " << nums[i] << "\n";
        }
        else if (i == nums.size() - 1)
        {
            hval = nums[i];
            cout << "Highest value is: " << nums[i] << "\n";
        }
    }
    if (lval == hval)
        cout << "Numbers " << lval << " and " << hval << " are equal.\n";
}
*/


/*4. Измените программу так, чтобы она работала с числами типа douЬle, а не int.*/
/*
#include <std_lib_facilities.h>
int main()
{
    double lval;
    double hval;
    double x;
    vector<double> nums;
    while (cin >> x)
        nums.push_back(x);
    sort(nums);
    for (int i = 0; i < nums.size(); ++i)
    {
        if (i == 0)
        {
            lval = nums[i];
            cout << "Lowest value is: " << nums[i] << "\n";
        }
        else if (i == nums.size() - 1)
        {
            hval = nums[i];
            cout << "Highest value is: " << nums[i] << "\n";
        }
    }
    if (lval == hval)
        cout << "Numbers " << lval << " and " << hval << " are equal.\n";
}
*/

/*5. Измените программу так.чтобы она выводила строку "Числа почти
равны" , если числа отличаются одно от другого меньше чем на 1.0/100.*/
/*
#include <std_lib_facilities.h>
int main()
{
    double lval;
    double hval;
    double x;
    vector<double> nums;
    while (cin >> x)
        nums.push_back(x);
    sort(nums);
    for (int i = 0; i < nums.size(); ++i)
    {
        if (i == 0)
        {
            lval = nums[i];
            cout << "Lowest value is: " << nums[i] << "\n";
        }
        else if (i == nums.size() - 1)
        {
            hval = nums[i];
            cout << "Highest value is: " << nums[i] << "\n";
        }
    }
    if (lval == hval)
    {
        cout << "Numbers " << lval << " and " << hval << " are equal.\n";
    }
    else if(lval + 1.0 / 100.0 > hval)
    { 
        cout << "Numbers " << lval << " and " << hval << " are almost equal.\n";
    }
}
*/

/*6. Теперь измените тело цикла так. чтобы он считывал только по одному
числу типа douЬle в каждой итерации. Определите две переменные,
чтобы отслеживать наименьшее и наибольшее среди всех ранее
введенных значений. В каждой итерации цикла выводите только что
введенное число. Если оно окажется наименьшим среди всех введенных,
выводите на экран строку "Наименьшее среди введенных" . Если же
оно окажется наибольшим среди введенных, выводите на экран строку
" Наибольшее среди введенных" .*/

//походу я так и сделал во 2 задании, как тогда надо было...?
//добавил только элс и поменял инт на дабл.
/*
#include <std_lib_facilities.h>
int main()
{
    double x;
    vector<double> nums;
    while (cin >> x)
        nums.push_back(x);
    sort(nums);
    for (int i = 0; i < nums.size(); ++i)
    {
        if (i == 0)
        {
            cout << "Lowest value is: " << nums[i] << "\n";
        }
        else if (i == nums.size() - 1)
        {
            cout << "Highest value is: " << nums[i] << "\n";
        }
        else
            cout << nums[i] << "\n";
    }
}
*/


/*7. Добавьте к каждому введенному числу типа doube единицу измерения;
иначе говоря, вводите такие значения, как 10cm, 2.5in, 5ft или 3.33m.
Допустимыми являются четыре единицы измерения : cm, m, in,ft.
Примите следующие коэффициенты преобразования : 1m == 100cm,
1in == 2.54cm, 1ft == 12in.Индикатор единицы измерения вводите в
строку.Можно считать ввод 12m(с пробелом между числом и единицей 
измерения) эквивалентным вводу 12m(без пробела).*/
/*
#include <std_lib_facilities.h>
int main()
{
    constexpr double cm_per_m = 100.0;
    constexpr double cm_per_in = 2.54;
    constexpr double in_per_ft = 12.0;
    double x;//nums
    string y;//units
    vector<double> nums;
    vector<string> units;
    while (cin >> x >> y)
    {
        nums.push_back(x);
        units.push_back(y);
    }

    for (int i = 0; i < units.size(); ++i)
    {
        if (units[i] == "cm")
        {
            cout << nums[i];
            cout << units[i] << "\n";
        }
        else if (units[i] == "m")
        {
            cout << nums[i] * cm_per_m;
            units[i] = "cm";
            cout << units[i] << "\n";
        }
        else if (units[i] == "in")
        {
            cout << nums[i] * cm_per_in;
            units[i] = "cm";
            cout << units[i] << "\n";
        }
        else if (units[i] == "ft")
        {
            cout << nums[i] * in_per_ft;
            units[i] = "in";
            cout << units[i] << "\n";
        }
        else;
    }
}
*/


/*8. Если введена неправильная единица измерения, например yard,
meter, km или gallons, то такое значение следует отклонить.
9. Отслеживайте сумму введенных значений(помимо наименьшего и
наибольшего) и их количество.Когда цикл завершится, выведите на
экран:
- наименьшее введенное значение,
- наибольшее введенное значение,
- количество введенных значений,
- их сумму.
Обратите внимание на то, что,накапливая сумму,вы должны выбрать
для нее единицу измерения (используйте метры).
10.Сохраняйте все введенные значения(преобразованные в метры) в векторе,
а по завершении работы цикла выведите их на экран.
11.Перед тем как вывести значения из вектора, отсортируйте их в порядке возрастания.*/
/*
#include <std_lib_facilities.h>
int main()
{
    constexpr double cm = 100.0; // const cm to m
    constexpr double in = 39.3701; // const in to m
    constexpr double ft = 3.28084; // const ft to m
    double temp;
    double sum = 0;
    double x;//nums
    string y;//units
    vector <pair<double, string> > g; //pair of vectors
    vector <pair<double, int> > meters; //pair of vectors for min max
    while (cin >> x >> y) //entering nums and units until ^z and clearing wrong values (not cm, m, in or ft)
    {
        if (y == "cm" || y == "m" || y == "in" || y == "ft")
            g.emplace_back(make_pair(x, y));
        else;
    }
    for (int i = 0; i < g.size(); ++i) //converting everything to meters, summing and pushing to new meters vector with static int index
    {
        if (g[i].second == "cm")
        {
            temp = g[i].first / cm;
            sum += temp;
            meters.emplace_back(make_pair(temp, i));
        }
        else if (g[i].second == "in")
        {
            temp = g[i].first / in;
            sum += temp;
            meters.emplace_back(make_pair(temp, i));
        }
        else if (g[i].second == "ft")
        {
            temp = g[i].first / ft;
            sum += temp;
            meters.emplace_back(make_pair(temp, i));
        }
        else
        {
            sum += g[i].first;
            meters.emplace_back(make_pair(g[i].first, i));
        }
    }
    sort(meters); //sorting vector meters
    cout << "Lowest value is: " << g[meters[0].second].first << g[meters[0].second].second << "\n"; //console output lowest value
    cout << "Highest value is: " << g[meters[meters.size() - 1].second].first << g[meters[meters.size() - 1].second].second << "\n"; //console output highest value
    cout << "Amount of values: " << g.size() << "\n";
    cout << "Sum of values: " << sum << "m" << "\n";
    for (int j = 0; j < meters.size(); ++j) //console output meters vector
    {
        cout << meters[j].first << "\t" << meters[j].second << "\n";
    }
}
*/
/*
1. Ти можеш робити перевірку валiдності одиниць виміру перед пишем, тоді не треба буде видаляти                 +
2. Для виводу найменшого/найбільшого не треба цикл                                                              +
3. Краще використовувати emplace_back замість push_back                                                         +
4. Коефіцієнти перетворень мають бути іменовані константи, в тебе не правильно сантиметри перетворюються        
*/


/*
1.Выполните задание Попробуйте.если еще не сделали этого раньше.
+

2. Допустим, мы определяем медиану последовательности как "число,
относительно которого ровно половина элементов меньше, а другая
половина - больше". Исправьте программу из раздела 4.6.2 так, чтобы
она всегда выводила медиану. Подсказка: медиана не обязана быть
элементом последовательности.


3. Прочтите последовательности чисел типа douЬle в вектор.Будем считать,
что каждое значение представляет собой расстояние между двумя
городами, расположенными на определенном маршруте. Вычислите
и выведите на печать общее расстояние(сумму всех расстояний).
Найдите и выведите на печать наименьшее и наибольшее расстояния
между двумя соседними городами. Найдите и выведите на печать
среднее расстояние между двумя соседними городами.


4.Напишите программу, угадываюrцую число.Пользователь должен задумать
число от 1 до 100, а программа должна задавать вопросы, чтобы
выяснить, какое число он задумал(например, "Задуманное число
меньше 50"). Ваша программа должна уметь идентифицировать с помощью
не более чем семи попыток.Подсказка: используйте операторы
< и <= .а также конструкцию i f - else.


5.Напишите программу, выполняюrцую самые простые функции калькулятора.
Ваш калькулятор должен выполнять четыре основные
арифметические операции - сложение, вычитание, умножение и деление.
Программа должна предлагать пользователю ввести три аргумента:
два значения типа doube и символ операции. Если входные
аргументы равны 35.6, 24.1 и '+', то программа должна вывести на
экран строку "Сумма 35.6 и 24.1 равна 59.7 ".В главе 6 мы рассмотрим
более сложный калькулятор.


6. Создайте вектор, хранящий десять строковых значений "zero", "one",
"...", "nine" . Используйте его в программе, преобразующей цифру в соответствующее
строковое представление: например, при вводе цифры
7 на экран должна быть выведена строка seven. С помощью этой
же программы, используя тот же цикл ввода, преобразуйте строковое
представление цифры в числовое: например, при вводе строки seven
на экран должна быть выведена цифра 7.


7. Модифицируйте мини-калькулятор, описанный в упр. 5, так, чтобы он
принимал на вход цифры, записанные как в числовом, так и в строковом
формате.


8. Легенда гласит, что некий царь захотел поблагодарить изобретателя
шахмат и предложил ему попросить любую награду. Изобретатель
попросил положить на первую клетку одно зерно риса, на вторую -
два, на третью - четыре и так далее, удваивая количество зерен на
каждой из 64 клеток. На первый взгляд, это желание выглядит вполне
скромным, но на самом деле в царстве не было такого количества
риса! Напишите программу, вычисляющую, сколько клеток надо заполнить,
чтобы изобретатель получил не менее 1000 зерен риса, не
менее 1 000 000 зерен риса и не менее 1 000 000 000 зерен риса. Вам,
разумеется, понадобится цикл и, вероятно, несколько переменных
типа int, для того чтобы отслеживать текущий номер клетки, количество
зерен в текущей клетке и количество зерен во всех предыдущих
клетках. Мы предлагаем на каждой итерации цикла выводить на
экран значения всех этих переменных, чтобы видеть промежуточные
результаты.


9. Попробуйте вычислить количество зерен риса, запрошенных изобретателем
шахмат в упр. 8. Оказывается, что это число настолько велико.
что для его точного представления не подходит ни тип int, ни
тип doube. Чему равно наибольшее количество клеток, для которых
еще можно вычислить точное количество зерен риса(с использованием
переменной типа int). Определите наибольшее количество клеток,
для которых еще можно вычислить приближенное количество зерен
(с использованием переменной типа double)?


10. Напишите программу для игры "Камень. бумага. ножницы". Если вы
не знаете правил этой игры.попробуйте выяснить их у друзей или с
помощью Google(поиск информации - обычное занятие программистов).
Для решения поставленной задачи используйте инструкцию
switch. Кроме того, машина должна давать случайные ответы (т.е.выбирать
камень, бумагу или ножницы на следующем ходу случайным
образом). Написать настоящий генератор случайных чисел прямо
сейчас вам будет довольно тяжело. поэтому заранее заполните вектор
последовательностью значений. Если встроить этот вектор в
программу, то она всегда будет играть одну и ту же игру, поэтому целесообразно
позволить пользователю самому вводить некоторые значения.
Попробуйте помешать пользователю легко угадывать следующий
ход машины.


11. Напишите программу, находящую все простые числа между 1 и 100.
Для этого можно написать функцию, проверяющую, является ли число
простым (т.е. делится ли оно на простое число, не превосходящее
данное), используя вектор простых чисел, записанный в порядке возрастания
(например, если вектор называется primes, то primes[0] = 2,
primes[1] = 3, primes[2] = 5 и т.д.).Напишите цикл перебора чисел от 1
до 100, проверьте каждое из них на простоту и сохраните найденные
простые числа в векторе. Напишите другой цикл, в котором все найденные
простые числа выводятся на экран. Сравните полученные результаты
с вектором primes. Первым простым числом считается число 2.


12. Измените программу из предыдущего упражнения так, чтобы в нее
вводилось число max, а затем найдите все простые числа от 1 до max.


13. Напишите программу, находящую все простые числа между 1 и 100.
Для решения этой задачи существует классический метод "Решето
Эратосфена". Если этот метод вам неизвестен, поищите его описание
в Интернете. Напишите программу, использующую этот метод.


14. Измените программу, описанную в предыдущем упражнении, так,
чтобы в нее вводилось число max, а затем найдите все простые числа
от 1 до max.


15. Напишите программу, принимающую на вход число n и находящую
первые n простых чисел.


16. В заданиях вам было предложено написать программу, которая для
определенного ряда чисел определяла бы наибольшее и наименьшее
числа в нем. Число, которое повторяется в последовательности наибольшее
количество раз, называется модой. Напишите программу,
определяющую моду множества положительных чисел.


17. Напишите программу, определяющую наименьшее и наибольшее
значения, а также моду последовательности строк типа string.


18. Напишите программу для решения квадратных уравнений. Квадратное
уравнение имеет вид ах2 + Ь + с = 0. Если вы не знаете формул для
решения такого уравнения, проведите дополнительные исследования.
Напомним, что программисты часто выполняют такие исследования,
прежде чем приступить к решению задачи. Для ввода чисел а, Ь и с
используйте переменные типа double. Поскольку квадратное уравнение
имеет два решения, выведите оба значения, xl и х2.


19. Напишите программу, в которую сначала вводится набор пар, состоящих
из имени и значения, например Joe 17 и Barbara 22. Для каждой
пары занесите имя в вектор names, а число - в вектор scores
(в соответствующие позиции, так что если names[7] == "Joe", то
scores[7] = 17). Прекратите ввод встретив строку ввода NoName 0.
Убедитесь.что каждое имя единственное, и выведите сообщение об
ошибке, если имеется имя, введенное дважды. Выведите на печать все
пары(имя, баллы) по одной в строке.


20. Измените программу из упр. 19 так, чтобы при вводе имени она выводила
соответствующее количество баллов или сообщение "Имя не найдено".


21. Измените программу из упр. 19 так, чтобы при вводе целого числа она
выводила имена всех студентов, получивших указанное количество
баллов, или сообщение " Баллы не найдены".
*/

