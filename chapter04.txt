/*ПОПРОБУЙТЕ
Используя приведенный выше пример, напишите программу для
перевода гривен, рублей и юаней в доллары. Если вы любите реализм,
уточните обменные курсы в Интернете .*/
/*
#include <std_lib_facilities.h>
int main()
{
    constexpr double UAH = 27.34;
    constexpr double RUB = 72.26;
    constexpr double CNY = 6.46;
    double length = 0;
    string currency = " ";
    cout << "What amount and currency you want to convert to dollars? (UAH, RUB, CNY)\n";
    cin >> length >> currency;
    if (currency == "UAH" || currency == "uah") {
        cout << length << " UAH is " << length / UAH << " USD.\n";
    }
    else if (currency == "RUB" || currency == "rub") {
        cout << length << " RUB is " << length / RUB << " USD.\n";
    }
    else if (currency == "CNY" || currency == "cny") {
        cout << length << " CNY is " << length / CNY << " USD.\n";
    }
    else {
        cout << "I don't know what is " << currency << " , sorry.\n";
    }
}
*/


/*ПОПРОБУЙТЕ
Пе репишите программу преобразования валют из п редыдущего раздела,
используя и нструкцию switch. Добавьте конвертацию евро и фунта стерлингов.
Какую из версий программы легче писать, понимать и модифицировать? Почему?*/
/*
#include <std_lib_facilities.h>
int main()
{
    double amount;
    constexpr double exch_uah = 27.34;
    constexpr double exch_rub = 72.13;
    constexpr double exch_eur = 0.84;
    constexpr double exch_gbp = 0.72;
    constexpr double exch_cny = 6.46;
    char currency;
    cout << "Enter amount and currency you want to convert to USD.\nAvailable currencies:\nu - for UAH\nr - for RUB\ne - for EUR\ng - for GBP\nc - for CNY\n\nAmount: ";
    cin >> amount;
    cout << "Currency: ";
    cin >> currency;
    switch (currency) {
    case 'u':
        cout << amount << " UAH is " << amount / exch_uah << " USD.\n";
        break;
    case 'r':
        cout << amount << " RUB is " << amount / exch_rub << " USD.\n";
        break;
    case 'e':
        cout << amount << " EUR is " << amount / exch_eur << " USD.\n";
        break;
    case 'g':
        cout << amount << " GBP is " << amount / exch_gbp << " USD.\n";
        break;
    case 'c':
        cout << amount << " CNY is " << amount / exch_cny << " USD.\n";
        break;

    default:
        cout << "Unkown curency.\n";
        break;
    }
}
*/


/*ПОПРОБУЙТЕ
Символ 'b' равен char ('a'+l) , 'c' равен char ('a'+2) и т.д. Используя
цикл, выведите на экран таблицу символов и соответствующих
им целочисленных значений.*/
/*
#include <std_lib_facilities.h>
int main()
{
    char a = 'a';
    int i = a;
    while (i <= 'z') {
        cout << i << "\t" << a << "\n";
        i++;
        a = i;
    }
}
*/


/*ПОПРОБУЙТЕ
Перепишите программу из предыдущей врезки "Попробуйте", выводящую
символы и соответствующие им целочисленные значения.
с помощью инструкции for. Затем модифицируйте программу так.
чтобы таблица содержала значения для прописных символов и цифр.*/
/*
#include <std_lib_facilities.h>
int main()
{
    char a = 'a';
    char A = 'A';
    char num = '0';
    for (int i = a; i <= 'z'; i++) {
        a = i;
        cout << i << "\t" << a << "\n";
    }
    for (int i = A; i <= 'Z'; i++) {
        A = i;
        cout << i << "\t" << A << "\n";
    }
    for (int i = num; i <= '9'; i++) {
        num = i;
        cout << i << "\t" << num << "\n";
    }
}
*/


/*ПОПРОБУЙТЕ
Реализуйте функцию square(), не используя оператор умножения;
иначе говоря, выполните умножение х*х с помощью повторяющегося
сложения (начните с переменной, равной нулю, и х раз добавьте к ней
число х). Затем выполните версию "первопрограммы", используя функцию
square().*/
/*
#include <std_lib_facilities.h>
int squaredsd(int x)
{
    int y = 0;
    for (int i = 0; i < x; i++) {
        y += x;
    }
    return y;
}
int main()
{
    cout << squaredsd(4) << '\n';
    cout << squaredsd(10) << '\n';
}
*/


/*Задание Выполните задание шаг за шагом. Не следует торопиться и пропускать
этапы . На каждом этапе проверьте программу, введя по крайней мере три
пары значений - чем больше, тем лучше.*/
/*1 . Напишите программу. содержащую цикл while, в котором считываются
и выводятся на экран два числа типа int. Для выхода из программы
используйте символ '|'.*/
/*
#include <std_lib_facilities.h>
int main()
{
    int x;
    vector<int> nums;
    while (cin >> x)
        nums.push_back(x);
    for (int i = 0; i < 2; ++i)
            cout << nums[i] << "\n";
}
*/


/*2. Измените программу так. чтобы она выводила на экран строку "Наименьшее
значение равно : " с последующим наименьшим значением,
а затем - строку " Наибольшее значение равно : " с последующим наибольшим
значением.*/
/*
#include <std_lib_facilities.h>
int main()
{
    int x;
    vector<int> nums;
    while (cin >> x)
        nums.push_back(x);
    sort(nums);
    for (int i = 0; i < nums.size(); ++i)
    {
        if (i == 0)
        {
            cout << "Lowest value is: " << nums[i] << "\n";
        }
        else if (i == nums.size() - 1)
        {
            cout << "Highest value is: " << nums[i] << "\n";
        }
    }
}
*/


/*3. Исправьте программу так. чтобы она выводила строку "Числа равны" ,
но только при равенстве введенных чисел.*/
/*
#include <std_lib_facilities.h>
int main()
{
    int lval;
    int hval;
    int x;
    vector<int> nums;
    while (cin >> x)
        nums.push_back(x);
    sort(nums);
    for (int i = 0; i < nums.size(); ++i)
    {
        if (i == 0)
        {
            lval = nums[i];
            cout << "Lowest value is: " << nums[i] << "\n";
        }
        else if (i == nums.size() - 1)
        {
            hval = nums[i];
            cout << "Highest value is: " << nums[i] << "\n";
        }
    }
    if (lval == hval)
        cout << "Numbers " << lval << " and " << hval << " are equal.\n";
}
*/


/*4. Измените программу так, чтобы она работала с числами типа douЬle, а не int.*/
/*
#include <std_lib_facilities.h>
int main()
{
    double lval;
    double hval;
    double x;
    vector<double> nums;
    while (cin >> x)
        nums.push_back(x);
    sort(nums);
    for (int i = 0; i < nums.size(); ++i)
    {
        if (i == 0)
        {
            lval = nums[i];
            cout << "Lowest value is: " << nums[i] << "\n";
        }
        else if (i == nums.size() - 1)
        {
            hval = nums[i];
            cout << "Highest value is: " << nums[i] << "\n";
        }
    }
    if (lval == hval)
        cout << "Numbers " << lval << " and " << hval << " are equal.\n";
}
*/

/*5. Измените программу так.чтобы она выводила строку "Числа почти
равны" , если числа отличаются одно от другого меньше чем на 1.0/100.*/
/*
#include <std_lib_facilities.h>
int main()
{
    double lval;
    double hval;
    double x;
    vector<double> nums;
    while (cin >> x)
        nums.push_back(x);
    sort(nums);
    for (int i = 0; i < nums.size(); ++i)
    {
        if (i == 0)
        {
            lval = nums[i];
            cout << "Lowest value is: " << nums[i] << "\n";
        }
        else if (i == nums.size() - 1)
        {
            hval = nums[i];
            cout << "Highest value is: " << nums[i] << "\n";
        }
    }
    if (lval == hval)
    {
        cout << "Numbers " << lval << " and " << hval << " are equal.\n";
    }
    else if(lval + 1.0 / 100.0 > hval)
    { 
        cout << "Numbers " << lval << " and " << hval << " are almost equal.\n";
    }
}
*/

/*6. Теперь измените тело цикла так. чтобы он считывал только по одному
числу типа douЬle в каждой итерации. Определите две переменные,
чтобы отслеживать наименьшее и наибольшее среди всех ранее
введенных значений. В каждой итерации цикла выводите только что
введенное число. Если оно окажется наименьшим среди всех введенных,
выводите на экран строку "Наименьшее среди введенных" . Если же
оно окажется наибольшим среди введенных, выводите на экран строку
" Наибольшее среди введенных" .*/

//походу я так и сделал во 2 задании, как тогда надо было...?
//добавил только элс и поменял инт на дабл.
/*
#include <std_lib_facilities.h>
int main()
{
    double x;
    vector<double> nums;
    while (cin >> x)
        nums.push_back(x);
    sort(nums);
    for (int i = 0; i < nums.size(); ++i)
    {
        if (i == 0)
        {
            cout << "Lowest value is: " << nums[i] << "\n";
        }
        else if (i == nums.size() - 1)
        {
            cout << "Highest value is: " << nums[i] << "\n";
        }
        else
            cout << nums[i] << "\n";
    }
}
*/


/*7. Добавьте к каждому введенному числу типа doube единицу измерения;
иначе говоря, вводите такие значения, как 10cm, 2.5in, 5ft или 3.33m.
Допустимыми являются четыре единицы измерения : cm, m, in,ft.
Примите следующие коэффициенты преобразования : 1m == 100cm,
1in == 2.54cm, 1ft == 12in.Индикатор единицы измерения вводите в
строку.Можно считать ввод 12m(с пробелом между числом и единицей 
измерения) эквивалентным вводу 12m(без пробела).*/
/*
#include <std_lib_facilities.h>
int main()
{
    constexpr double cm_per_m = 100.0;
    constexpr double cm_per_in = 2.54;
    constexpr double in_per_ft = 12.0;
    double x;//nums
    string y;//units
    vector<double> nums;
    vector<string> units;
    while (cin >> x >> y)
    {
        nums.push_back(x);
        units.push_back(y);
    }

    for (int i = 0; i < units.size(); ++i)
    {
        if (units[i] == "cm")
        {
            cout << nums[i];
            cout << units[i] << "\n";
        }
        else if (units[i] == "m")
        {
            cout << nums[i] * cm_per_m;
            units[i] = "cm";
            cout << units[i] << "\n";
        }
        else if (units[i] == "in")
        {
            cout << nums[i] * cm_per_in;
            units[i] = "cm";
            cout << units[i] << "\n";
        }
        else if (units[i] == "ft")
        {
            cout << nums[i] * in_per_ft;
            units[i] = "in";
            cout << units[i] << "\n";
        }
        else;
    }
}
*/


/*8. Если введена неправильная единица измерения, например yard,
meter, km или gallons, то такое значение следует отклонить.*/

//еще работаю над этой задачей
/*
#include <std_lib_facilities.h>
int main()
{
    constexpr double cm_per_m = 100.0;
    constexpr double cm_per_in = 2.54;
    constexpr double in_per_ft = 12.0;
    double x;//nums
    string y;//units
    vector<double> nums;
    vector<string> units;
    while (cin >> x >> y)
    {
        nums.push_back(x);
        units.push_back(y);
    }

    for (int i = 0; i < units.size(); ++i)
    {
        if (units[i] == "cm")
        {
            cout << nums[i];
            cout << units[i] << "\n";
        }
        else if (units[i] == "m")
        {
            cout << nums[i] * cm_per_m;
            units[i] = "cm";
            cout << units[i] << "\n";
        }
        else if (units[i] == "in")
        {
            cout << nums[i] * cm_per_in;
            units[i] = "cm";
            cout << units[i] << "\n";
        }
        else if (units[i] == "ft")
        {
            cout << nums[i] * in_per_ft;
            units[i] = "in";
            cout << units[i] << "\n";
        }
        else
            cout << "canceled\n";
    }
}
*/


/*9. Отслеживайте сумму введенных значений(помимо наименьшего и 
наибольшего) и их количество.Когда цикл завершится, выведите на 
экран:
- наименьшее введенное значение,
- наибольшее введенное значение, 
- количество введенных значений 
- их сумму.
Обратите внимание на то, что,накапливая сумму,вы должны выбрать 
для нее единицу измерения (используйте метры).*/

//еще работаю над этой задачей
#include <std_lib_facilities.h>
int main()
{
    constexpr double cm_per_m = 100.0;
    constexpr double cm_per_in = 2.54;
    constexpr double in_per_ft = 12.0;
    double x;//nums
    string y;//units
    vector <pair<double, string> > g;
     while (cin >> x >> y)
    {
        g.push_back(make_pair(x, y));
    }
    sort(g);

    double sum = 0;

    for (int i = 0; i < g.size(); ++i)
    {
        if (g[i].second == "cm" || g[i].second == "m" || g[i].second == "in" || g[i].second == "ft")
        {
            if (i == 0)
            {
                cout << "Lowest value is: " << g[i].first << g[i].second << "\n";
            }
            else if (i == g.size() - 1)
            {
                cout << "Highest value is: " << g[i].first << g[i].second << "\n";
            }
            sum += g[i].first;
        }
        else;
    }
    cout << "Amount of values: " << g.size() << "\n";
    cout << "Sum of values: " << sum << "\n";

}



/*10.Сохраняйте все введенные значения(преобразованные в метры) в векторе,
а по завершении работы цикла выведите их на экран.*/


/*11.Перед тем как вывести значения из вектора, отсортируйте их в порядке возрастания.*/

